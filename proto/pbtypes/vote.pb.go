// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vote.proto

package pbtypes

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
	pbcrypto "github.com/232425wxy/meta--/proto/pbcrypto"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VoteType int32

const (
	PrepareVoteType   VoteType = 0
	PreCommitVoteType VoteType = 1
	CommitVoteType    VoteType = 2
)

var VoteType_name = map[int32]string{
	0: "PREPARE_VOTE_TYPE",
	1: "PRE_COMMIT_VOTE_TYPE",
	2: "COMMIT_VOTE_TYPE",
}

var VoteType_value = map[string]int32{
	"PREPARE_VOTE_TYPE":    0,
	"PRE_COMMIT_VOTE_TYPE": 1,
	"COMMIT_VOTE_TYPE":     2,
}

func (x VoteType) String() string {
	return proto.EnumName(VoteType_name, int32(x))
}

func (VoteType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_21d31c94b62a6ac7, []int{0}
}

type Vote struct {
	VoteType  VoteType            `protobuf:"varint,1,opt,name=vote_type,json=voteType,proto3,enum=pbtypes.VoteType" json:"vote_type,omitempty"`
	Height    int64               `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	BlockHash []byte              `protobuf:"bytes,3,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	Timestamp time.Time           `protobuf:"bytes,4,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	Voter     string              `protobuf:"bytes,5,opt,name=voter,proto3" json:"voter,omitempty"`
	Signature *pbcrypto.Signature `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_21d31c94b62a6ac7, []int{0}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetVoteType() VoteType {
	if m != nil {
		return m.VoteType
	}
	return PrepareVoteType
}

func (m *Vote) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Vote) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *Vote) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *Vote) GetVoter() string {
	if m != nil {
		return m.Voter
	}
	return ""
}

func (m *Vote) GetSignature() *pbcrypto.Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterEnum("pbtypes.VoteType", VoteType_name, VoteType_value)
	proto.RegisterType((*Vote)(nil), "pbtypes.Vote")
}

func init() { proto.RegisterFile("vote.proto", fileDescriptor_21d31c94b62a6ac7) }

var fileDescriptor_21d31c94b62a6ac7 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xcf, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0x33, 0xfd, 0xb1, 0x26, 0xa3, 0xd4, 0xee, 0xb4, 0x4a, 0x18, 0x64, 0x3a, 0x88, 0x87,
	0x50, 0x70, 0x42, 0x5b, 0x0f, 0x5e, 0x4d, 0x09, 0xe8, 0xa1, 0x34, 0x8c, 0xa1, 0xe0, 0x29, 0x24,
	0x65, 0xcc, 0x06, 0x1b, 0x67, 0x48, 0xa6, 0x85, 0xfd, 0x0f, 0x64, 0x4f, 0xbd, 0xcb, 0x9e, 0xf4,
	0xe0, 0x9f, 0xb2, 0xc7, 0x3d, 0x7a, 0x52, 0xd9, 0xfd, 0x2b, 0xbc, 0x49, 0x7e, 0xab, 0xbd, 0xbd,
	0xef, 0x9b, 0xcf, 0x7b, 0x7c, 0xe6, 0x41, 0x78, 0x23, 0xb5, 0x60, 0xaa, 0x90, 0x5a, 0xa2, 0x7b,
	0x2a, 0xd1, 0x53, 0x25, 0x4a, 0xfc, 0x2c, 0x95, 0xa9, 0xac, 0x7b, 0xcf, 0x8f, 0xd8, 0x0b, 0x76,
	0xe2, 0xf6, 0xb9, 0xae, 0x1a, 0x1c, 0x93, 0xa6, 0xa3, 0x92, 0xcb, 0x62, 0xaa, 0xb4, 0x74, 0xcb,
	0x2c, 0xfd, 0x18, 0xeb, 0xeb, 0xa2, 0x5d, 0x87, 0x5f, 0xfe, 0xbf, 0xa5, 0xae, 0x93, 0xeb, 0xf7,
	0x6e, 0x2a, 0x65, 0x7a, 0x25, 0x86, 0xac, 0xb3, 0x5c, 0x94, 0x3a, 0xce, 0x55, 0x33, 0xf9, 0xf4,
	0x37, 0x80, 0x5b, 0x17, 0x52, 0x0b, 0xc4, 0xa0, 0x55, 0xf9, 0x45, 0x95, 0x96, 0x0d, 0x28, 0x70,
	0x76, 0x8e, 0xc7, 0xac, 0xb5, 0x64, 0x15, 0x11, 0x4e, 0x95, 0xe0, 0xe6, 0x4d, 0x5b, 0xa1, 0xc7,
	0x70, 0x34, 0x11, 0x59, 0x3a, 0xd1, 0xf6, 0x06, 0x05, 0xce, 0x26, 0x6f, 0x13, 0x7a, 0x02, 0x2d,
	0xef, 0x4a, 0x5e, 0x7e, 0x78, 0x1d, 0x97, 0x13, 0x7b, 0x93, 0x02, 0xe7, 0x01, 0x1f, 0x1a, 0xc8,
	0x83, 0x56, 0x6f, 0x60, 0x6f, 0x51, 0xe0, 0xdc, 0x3f, 0xc6, 0xac, 0x71, 0x64, 0x9d, 0x23, 0x0b,
	0x3b, 0xc2, 0x33, 0x17, 0x3f, 0x0e, 0x8c, 0xdb, 0x9f, 0x07, 0x80, 0x0f, 0x63, 0x68, 0x1f, 0x6e,
	0x57, 0x16, 0x85, 0xbd, 0x4d, 0x81, 0x63, 0xf1, 0x26, 0xa0, 0x23, 0x68, 0xf5, 0x57, 0xb1, 0x47,
	0xf5, 0xe6, 0x3d, 0xd6, 0x1d, 0x8c, 0xbd, 0xed, 0x9e, 0xf8, 0x40, 0x1d, 0x7e, 0x06, 0xd0, 0xec,
	0x7e, 0x86, 0x0e, 0xe1, 0x38, 0xe0, 0x7e, 0xf0, 0x8a, 0xfb, 0xd1, 0xc5, 0x79, 0xe8, 0x47, 0xe1,
	0xbb, 0xc0, 0xdf, 0x35, 0xf0, 0xde, 0x6c, 0x4e, 0x1f, 0x06, 0x85, 0x50, 0x71, 0x21, 0x7a, 0xd6,
	0x85, 0xfb, 0x01, 0xf7, 0xa3, 0xd3, 0xf3, 0xb3, 0xb3, 0x37, 0xe1, 0x5f, 0x38, 0xc0, 0x8f, 0x66,
	0x73, 0x3a, 0x0e, 0x0a, 0x71, 0x2a, 0xf3, 0x3c, 0xd3, 0xfd, 0x80, 0x03, 0x77, 0xef, 0xc0, 0x1b,
	0x18, 0xcd, 0xe6, 0x74, 0xe7, 0x5f, 0x12, 0x9b, 0x9f, 0xbe, 0x10, 0xe3, 0xdb, 0x57, 0x02, 0x3c,
	0x7b, 0xb1, 0x22, 0x60, 0xb9, 0x22, 0xe0, 0xd7, 0x8a, 0x80, 0xdb, 0x35, 0x31, 0x96, 0x6b, 0x62,
	0x7c, 0x5f, 0x13, 0x23, 0x19, 0xd5, 0x97, 0x3a, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x75,
	0x51, 0x96, 0x51, 0x02, 0x00, 0x00,
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVote(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintVote(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x2a
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintVote(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintVote(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintVote(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.VoteType != 0 {
		i = encodeVarintVote(dAtA, i, uint64(m.VoteType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVote(dAtA []byte, offset int, v uint64) int {
	offset -= sovVote(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoteType != 0 {
		n += 1 + sovVote(uint64(m.VoteType))
	}
	if m.Height != 0 {
		n += 1 + sovVote(uint64(m.Height))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovVote(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovVote(uint64(l))
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovVote(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovVote(uint64(l))
	}
	return n
}

func sovVote(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVote(x uint64) (n int) {
	return sovVote(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVote
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteType", wireType)
			}
			m.VoteType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteType |= VoteType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &pbcrypto.Signature{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVote(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVote
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVote(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVote
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVote
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVote
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVote
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVote        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVote          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVote = fmt.Errorf("proto: unexpected end of group")
)
